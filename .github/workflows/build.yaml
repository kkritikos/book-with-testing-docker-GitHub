name: Java CI

on: [push]

jobs:
  init:
    runs-on: ubuntu-latest

    steps:
      - name: Echoing sth
        run: echo "Build is starting!!!"
  build:
    needs: init
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots -DskipTests clean package
      - name: Move war to staging 
        run: mkdir staging && cp book-rest/target/*.war staging
      - name: Uploading war file
        uses: actions/upload-artifact@v2
        with:
          name: Package
          path: staging
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
            # And make it available for the builds
      - name: Build and push REST locally
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: book:latest
          outputs: type=docker,dest=/tmp/myimage.tar
      - name: Upload image
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - uses: actions/checkout@v2
      - name: setup containers for running the test
        run: | 
          docker network create book-net
          docker run -d --name mysql --network-alias mysql -e MYSQL_ROOT_PASSWORD=${{secrets.MYSQL_ROOT_PASSWORD}} -v ${{github.workspace}}/mysql:/docker-entrypoint-initdb.d/ mysql:latest
          docker run -d --name tomcat --network-alias tomcat book:latest
      - name: Verify MySQL connection from host and run SQL script
        run: |
          echo "${{ toJson(job) }}"
          #sudo apt-get install -y mysql-client
          #mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -p${{secrets.MYSQL_ROOT_PASSWORD}} < ./mysql/setup.sql
          #mysql --host 127.0.0.1 --port ${{ job.services.mysql.ports['3306'] }} -uroot -p${{secrets.MYSQL_ROOT_PASSWORD}} -e "SHOW DATABASES"
          #docker logs "${{ job.services.mysql.id }}"
          docker logs mysql
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Test with Maven
        run: mvn --batch-mode --update-snapshots verify
      - name: Move test results to results 
        run: mkdir results && cp book-functional-tests/target/failsafe-reports/*.xml results
      - name: Uploading test results
        uses: actions/upload-artifact@v2
        with:
          name: Test-Result
          path: results
  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps: 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      - name: Load image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PWD }}
      - name: push to github
        run: |
          docker tag book:latest kkritikos/book:latest
          docker push kkritikos/book:latest
